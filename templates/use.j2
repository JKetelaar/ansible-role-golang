#!/usr/bin/env bash

display_error() {
	command -v tput &> /dev/null
	if [[ "$?" == "0" ]]  && [[ "$TERM" == "xterm" ]]; then
		tput sgr0
		tput setaf 1
		echo "ERROR: $1" >&2
		tput sgr0
	else
		echo "ERROR: $1" >&2
	fi
	return 1
}

display_fatal() {
	command -v tput &> /dev/null
	if [[ "$?" == "0" ]]  && [[ "$TERM" == "xterm" ]]; then
		tput sgr0
		tput setaf 1
		echo "ERROR: $1" >&2
		tput sgr0
	else
		echo "ERROR: $1" >&2
	fi
	exit 1
}

display_message() {
	command -v tput &> /dev/null
	if [[ "$?" == "0" ]]  && [[ "$TERM" == "xterm" ]]; then
		# GREEN!
		tput sgr0
		tput setaf 2
		echo "$1"
		tput sgr0
	else
		echo "$1"
	fi
}

display_warning() {
	command -v tput &> /dev/null
	if [[ "$?" == "0" ]]  && [[ "$TERM" == "xterm" ]]; then
		# YELLOW!
		tput sgr0
		tput setaf 3
		echo "WARNING: $1"
		tput sgr0
	else
		echo "$1"
	fi
	return 1
}

#!/usr/bin/env bash
function gvm_pkgset_use() {
	[[ "$1" != "" ]] ||
		display_error "Please specify a package set" || return 1

	[[ "$gvm_go_name" != "" ]] ||
		display_error "No Go version selected" || return 1

	if [[ "$1" == "--local" ]]; then
		. "$GVM_ROOT/scripts/function/find_local_pkgset"
		local LOCAL_TOP=$(find_local_pkgset)
		unset -f find_local_pkgset
		[[ -d $LOCAL_TOP ]] ||
			display_error "Cannot find local package set" || return 1
		LOCAL_TOP=$LOCAL_TOP/.gvm_local

		fuzzy_match=$($LS_PATH "$LOCAL_TOP/environments" | $SORT_PATH | $GREP_PATH "$gvm_go_name@" | $GREP_PATH "local" | $HEAD_PATH -n 1) ||
			display_error "Cannot find local package set" || return 1

		[[ "$2" != "--default" ]] ||
			display_error "Cannot set local pkgset as default" || return 1

		gvm_export_path
		. "$LOCAL_TOP/environments/$fuzzy_match" ||
			display_error "Failed to source the package set environment" || return 1

		echo "Now using version $gvm_go_name in local package set"
		echo "Local GOPATH is now $LOCAL_TOP"
	else
		fuzzy_match=$($LS_PATH "$GVM_ROOT/environments" | $SORT_PATH | $GREP_PATH "$gvm_go_name@" | $GREP_PATH "$1" | $HEAD_PATH -n 1) ||
			display_error "Invalid package set" || return 1

		gvm_export_path
		. "$GVM_ROOT/environments/$fuzzy_match" ||
			display_error "Failed to source the package set environment" || return 1

		if [[ "$2" == "--default" ]]; then
			cp "$GVM_ROOT/environments/$fuzzy_match" "$GVM_ROOT/environments/default"
		fi

		echo "Now using version $fuzzy_match"
	fi
}

function gvm_environment_sanitize() {
	local ACTIVE_GO=$(which go)
	if [[ "${ACTIVE_GO/${GOROOT}}" != "/bin/go" ]]; then
		OLD_GOROOT=$GOROOT && unset GOROOT
		GOROOT=$(go env GOROOT)
		sed -i 's|'${OLD_GOROOT}'|'${GOROOT}'|g' "$GVM_ROOT/environments/$1"
		. "$GVM_ROOT/environments/$1" &> /dev/null
	fi
}

function gvm_export_path() {
	export PATH="$GVM_ROOT/bin:$(echo "$PATH" | tr ":" "\n" | "$GREP_PATH" -v '^$' | egrep -v "$GVM_ROOT/(pkgsets|gos|bin)" | tr "\n" ":" | sed 's/:*$//')"
	export GVM_PATH_BACKUP="$PATH"
}

function gvm_use() {
	if [[ "$1" == "-h" ]]; then
		display_message "Usage: gvm use VERSION[@PKGSET] [--default]"
		return 1
	fi

	if [[ "x$1" == x ]]; then
		display_error "Please specify the version"
		return 1
	fi

	if [[ "$1" =~ ^(.+)@(.+)$ ]]; then
		local VERSION="${BASH_REMATCH[1]}"
		local PKGSET="${BASH_REMATCH[2]}"
	else
		local VERSION=$1
        fi

	fuzzy_match=$($LS_PATH "$GVM_ROOT/gos" | $SORT_PATH | $GREP_PATH "$VERSION" | $HEAD_PATH -n 1 | $GREP_PATH "$VERSION")
	if [[ "$?" != "0" ]]; then
		GO_CACHE_PATH=$GVM_ROOT/archive/go
		version=$(cd "$GO_CACHE_PATH" && git tag -l "$VERSION")
		if [[ "x$version" == "x" ]]; then
			display_error "Version not found locally. Try 'gvm install $VERSION'" || return 1
		else
			display_warning "$version is not installed. Install it by running 'gvm install $version'" || return 1
		fi
	fi

	gvm_export_path
	. "$GVM_ROOT/environments/$fuzzy_match" &> /dev/null || display_error "Couldn't source environment" || return 1
	gvm_environment_sanitize "$fuzzy_match"
	if [[ "$2" == "--default" ]]; then
		sudo cp "$GVM_ROOT/environments/$fuzzy_match" "$GVM_ROOT/environments/default" || display_error "Couldn't make $fuzzy_match default"
	fi


	if [[ "x$PKGSET" != "x" ]]; then
		gvm_pkgset_use $PKGSET &> /dev/null || display_error "Couldn't find pkgset $PKGSET for $VERSION" || return 1
	fi
	display_message "Now using version $fuzzy_match"

}

GVM_ROOT={{ go_location }}
LS_ERROR="GVM couldn't find ls"
GREP_ERROR="GVM couldn't find grep"
SORT_ERROR="GVM couldn't find sort"
HEAD_ERROR="GVM couldn't find head"

LS_PATH=$(unalias ls &> /dev/null; command -v ls) || display_error "$LS_ERROR" || return 1
GREP_PATH=$(unalias grep &> /dev/null; command -v grep) || display_error "$GREP_ERROR" || return 1
SORT_PATH=$(unalias sort &> /dev/null; command -v sort) || display_error "$SORT_ERROR" || return 1
HEAD_PATH=$(unalias head &> /dev/null; command -v head) || display_error "$HEAD_ERROR" || return 1

gvm_use $*