---
- name: "Go-Lang | Define shell exports"
  set_fact:
    shell_exports:
    - regex: "export GOROOT"
      lineinfile: "export GOROOT={{ GOROOT }}"
    - regex: "export GOPATH"
      lineinfile: "export GOPATH={{ GOPATH }}"
    - regex: "PATH:{{ GOPATH }}/bin"
      lineinfile: "export PATH=$PATH:{{ GOPATH }}/bin"
  when: shell_exports is not defined

- name: "Go-Lang | Ensure bootstrap directory is writable"
  become: yes
  become_user: root
  file:
    path: "{{ GOROOT_BOOTSTRAP }}"
    state: directory
    owner: "{{ fubarhouse_user }}"
    mode: 0755
  when:
   - GOROOT_BOOTSTRAP is defined
   - install_go_bootstrap == true

- name: "Go-Lang | Get bootstrap distribution"
  git:
    repo: "https://github.com/golang/go.git"
    dest: "{{ GOROOT_BOOTSTRAP }}"
    version: "release-branch.go1.4"
    clone: yes
    update: no
  when:
   - GOROOT_BOOTSTRAP is defined
   - install_go_bootstrap == true

- name: "Go-Lang | Building Bootstrapper"
  shell: "cd {{ GOROOT_BOOTSTRAP }}/src && ./{{ go_build_script }}"
  environment:
    GOROOT_BOOTSTRAP: "{{ GOROOT_BOOTSTRAP }}"
  when:
   - GOROOT_BOOTSTRAP is defined
   - install_go_bootstrap == true
   - go_binary_bootstrap.stat.exists|bool == false

- name: "Go-Lang | Get distribution"
  become: yes
  become_user: root
  get_url:
    url: "{{ go_custom_mirror }}/{{ go_distribution_filename }}.tar.gz"
    dest: "{{ go_temporary_dir }}/{{ go_distribution_filename }}.tar.gz"
    validate_certs: no

- name: "Go-Lang | Empty destination directory"
  become: yes
  become_user: root
  file:
    path: "{{ GOROOT }}"
    state: absent

- name: "Go-Lang | Ensure directory is writable"
  become: yes
  become_user: root
  file:
    path: "{{ GOROOT }}"
    state: directory
    owner: "{{ fubarhouse_user }}"
    mode: 0755
    recurse: true

- name: "Go-Lang | Unpack distribution"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  unarchive:
    src: "{{ go_temporary_dir }}/{{ go_distribution_filename }}.tar.gz"
    dest: "{{ go_temporary_dir }}"
    copy: "no"

- name: "Go-Lang | Moving to installation directory"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  synchronize:
    src: "{{ go_temporary_dir }}/go/"
    dest: "{{ GOROOT }}"
    delete: yes
    recursive: yes
  delegate_to: "{{ inventory_hostname }}"
  when: ansible_ssh_user is undefined

- name: "Go-Lang | Moving to installation directory"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "cp -rf {{ go_temporary_dir }}/go/* {{ GOROOT }}/"
  when: ansible_ssh_user is defined

- name: "Go-Lang | Remove temporary data"
  become: yes
  become_user: root
  file:
    path: "{{ go_temporary_dir }}/go/"
    state: absent

- name: "Go-Lang | Build from source"
  shell: "cd {{ GOROOT }}/src && ./{{ go_build_script }}"
  environment:
    GOROOT: "{{ GOROOT }}"
    GOPATH: "{{ GOPATH }}"
    GOROOT_BOOTSTRAP: "{{ GOROOT_BOOTSTRAP }}"
  when:
   - GOROOT_BOOTSTRAP is defined
   - build_go_from_source|bool == true

- name: "Go-Lang | Detect configured shell profiles"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  stat:
    path: "{{ fubarhouse_user_dir }}/{{ item }}"
  changed_when: false
  failed_when: false
  with_items: "{{ shell_profiles }}"
  register: stat_shell_profiles
  when: shell_profiles is defined

- name: "Go-Lang | Ensure shell profiles are configured"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  lineinfile:
    dest: "{{ item[0].stat.path }}"
    regexp: "{{ item[1].regex }}"
    line: "{{ item[1].lineinfile }}"
    state: present
  with_nested:
  - "{{ stat_shell_profiles.results }}"
  - "{{ shell_exports }}"
  when:
  - shell_profiles is defined
  - item[0].stat.exists|bool == true

- name: "Go-Lang | Verify version"
  shell: "{{ GOPATH }}/go version"
  environment:
    GOROOT: "{{ GOROOT }}"
    GOPATH: "{{ GOPATH }}"
  register: go_version_output
  failed_when: '"{{ go_version }}" not in "{{ go_version_output.stdout }}"'
  changed_when: false

- name: "Go-Lang | Restart shell"
  become: yes
  become_user: "{{ fubarhouse_user }}"
  shell: "{{ fubarhouse_user_dir }}/{{ item }}"
  with_items: "{{ shell_profiles }}"
  failed_when: false
